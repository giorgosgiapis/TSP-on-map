{"version":3,"sources":["ng://@fireflysemantics/join/lib/index.ts"],"names":["args","_i","arguments","length","components","forEach","component","TypeError","protocol","match","first","shift","replace","i","push","url","join","parts","split"],"mappings":"8SA8BqB,IAAAA,EAAA,GAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,GACjB,IAAIG,EAAa,GAMjB,GAAoB,IAAhBJ,EAAKG,OACL,MAAO,GAIXH,EAAKK,SAAQ,SAAAC,GACT,GAAyB,iBAAdA,EACP,MAAM,IAAIC,UACN,oEACUD,EAAS,gCAAgCA,MAS/D,IAAME,EAAWR,EAAK,GAEtB,GAAIQ,EAASC,MAAM,iBAAmBT,EAAKG,OAAS,EAAG,CACnD,IAAIO,EAAQV,EAAKW,QACjBX,EAAK,GAAKU,EAAQV,EAAK,GAOvBA,EAAK,GAAGS,MAAM,gBACdT,EAAK,GAAKA,EAAK,GAAGY,QAAQ,gBAAiB,UAE3CZ,EAAK,GAAKA,EAAK,GAAGY,QAAQ,gBAAiB,SAI/CZ,EAAKK,SAAQ,SAACC,EAAWO,GACH,KAAdP,IAKAO,EAAI,IACJP,EAAYA,EAAUM,QAAQ,SAAU,KAOxCN,EADAO,EAAIb,EAAKG,OAAS,EACNG,EAAUM,QAAQ,SAAU,IAG5BN,EAAUM,QAAQ,SAAU,KAE5CR,EAAWU,KAAKR,OAMpB,IAAIS,EAAMX,EAAWY,KAAK,KAMtBC,GAHJF,EAAMA,EAAIH,QAAQ,kBAAmB,OAGrBM,MAAM,KAEtB,OADAH,EAAME,EAAMN,SAAWM,EAAMd,OAAS,EAAI,IAAM,IAAMc,EAAMD,KAAK","sourcesContent":["/**\nMIT License\n\nCopyright (c) Firefly Semantics Corporation\nCopyright (c) 2020 Ole K. Ersoy\nCopyright (c) 2015 JosÃ© F. Romaniello\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE. */\n\n/**\n * @param args The components of the URL\n * @throws TypeError if the args URL components are not all of type string \n * @return The URL string\n */\nexport function join(...args): string {\n    let components = []\n\n    /**\n     * If an empty array is received then\n     * the URL is just ''.\n     */\n    if (args.length === 0) {\n        return ''\n    }\n\n    /** The args values must be of type string */\n    args.forEach(component => {\n        if (typeof component !== 'string') {\n            throw new TypeError(\n                `Url components must be of type string. \n                    The ${component} component is of type ${typeof component}`)\n        }\n    })\n\n    /**\n     * If the protocol is specified by itself,\n     * then the protocol is combined with the \n     * subsequent array value.\n     */\n    const protocol = args[0]\n\n    if (protocol.match(/^[^/:]+:\\/*$/) && args.length > 1) {\n        var first = args.shift()\n        args[0] = first + args[0]\n    }\n\n    /**\n     * The file protocol should have two or three slashes. \n     * Other protocols should have 2.\n     */\n    if (args[0].match(/^file:\\/\\/\\//)) {\n        args[0] = args[0].replace(/^([^/:]+):\\/*/, '$1:///')\n    } else {\n        args[0] = args[0].replace(/^([^/:]+):\\/*/, '$1://')\n    }\n\n    /** The args values must be of type string */\n    args.forEach((component, i) => {\n        if (component === '') { return }\n\n        /**\n         * Remove starting slashes for all but the first component\n         */\n        if (i > 0) {\n            component = component.replace(/^[\\/]+/, '')\n        }\n\n        /**\n         * Remove the ending slashes for each component but the last.\n         */\n        if (i < args.length - 1) {\n            component = component.replace(/[\\/]+$/, '')\n        } else {\n            // For the last combine multiple slashes into one.\n            component = component.replace(/[\\/]+$/, '/')\n        }\n        components.push(component)\n    })\n\n    /**\n     * Separate all the components by a single /\n     */\n    let url = components.join('/')\n\n    // remove trailing slash before parameters or hash\n    url = url.replace(/\\/(\\?|&|#[^!])/g, '$1')\n\n    // replace ? in parameters with &\n    var parts = url.split('?')\n    url = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&')\n    return url\n}"]}